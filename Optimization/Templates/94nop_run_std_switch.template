
			/* Evaluate A- and B-operand. */
			switch (GET_MODES(ip->insn)) {
			case MODES(IMMEDIATE, IMMEDIATE):
				/* Evaluate A- and B-operand. */
				aAddr = bAddr = ip;
				ra_a = rb_a = ip->a;
				ra_b = rb_b = ip->b;
				break;
			case MODES(IMMEDIATE, DIRECT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(IMMEDIATE, B_INDIRECT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(IMMEDIATE, B_PREDECREMENT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(IMMEDIATE, B_POSTINCREMENT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;
				
				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(IMMEDIATE, A_INDIRECT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;
				
				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(IMMEDIATE, A_PREDECREMENT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(IMMEDIATE, A_POSTINCREMENT):
				/* Evaluate A-operand. */
				aAddr = ip;
				ra_a = ip->a;
				ra_b = ip->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(DIRECT, IMMEDIATE):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_a = ip->a;
				rb_b = ip->b;
				break;
			case MODES(DIRECT, DIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(DIRECT, B_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(DIRECT, B_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(DIRECT, B_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(DIRECT, A_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(DIRECT, A_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(DIRECT, A_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(B_INDIRECT, IMMEDIATE):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_a = ip->a;
				rb_b = ip->b;
				break;
			case MODES(B_INDIRECT, DIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_INDIRECT, B_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_INDIRECT, B_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_INDIRECT, B_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(B_INDIRECT, A_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_INDIRECT, A_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);							DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_INDIRECT, A_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(B_PREDECREMENT, IMMEDIATE):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_a = ip->a;
				break;
			case MODES(B_PREDECREMENT, DIRECT):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_PREDECREMENT, B_INDIRECT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_PREDECREMENT, B_PREDECREMENT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_PREDECREMENT, B_POSTINCREMENT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(B_PREDECREMENT, A_INDIRECT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_PREDECREMENT, A_PREDECREMENT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_PREDECREMENT, A_POSTINCREMENT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(B_POSTINCREMENT, IMMEDIATE):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_a = ip->a;
				break;
			case MODES(B_POSTINCREMENT, DIRECT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);
	
				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_POSTINCREMENT, B_INDIRECT):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_POSTINCREMENT, B_PREDECREMENT):
				rb_b = ip->b;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_POSTINCREMENT, B_POSTINCREMENT):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(B_POSTINCREMENT, A_INDIRECT):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);
				
				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_POSTINCREMENT, A_PREDECREMENT):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);
				
				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(B_POSTINCREMENT, A_POSTINCREMENT):
				rb_b = ip->b;
				
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(A_INDIRECT, IMMEDIATE):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_a = ip->a;
				rb_b = ip->b;
				break;
			case MODES(A_INDIRECT, DIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_INDIRECT, B_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_INDIRECT, B_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_INDIRECT, B_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(A_INDIRECT, A_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_INDIRECT, A_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_INDIRECT, A_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(A_PREDECREMENT, IMMEDIATE):
				rb_a = ip->a;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_b = ip->b;
				break;
			case MODES(A_PREDECREMENT, DIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_PREDECREMENT, B_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_PREDECREMENT, B_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_PREDECREMENT, B_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(A_PREDECREMENT,A_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_PREDECREMENT, A_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_PREDECREMENT, A_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(A_POSTINCREMENT, IMMEDIATE):
				rb_a = ip->a;

				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				bAddr = ip;
				rb_b = ip->b;
				break;
			case MODES(A_POSTINCREMENT, DIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_POSTINCREMENT, B_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_POSTINCREMENT, B_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_POSTINCREMENT, B_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			case MODES(A_POSTINCREMENT, A_INDIRECT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_POSTINCREMENT, A_PREDECREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				break;
			case MODES(A_POSTINCREMENT, A_POSTINCREMENT):
				/* Evaluate A-operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				tmp_field = &(aAddr->a);
				ADDADDR(aAddr, aAddr->a);
				ra_a = aAddr->a;
				ra_b = aAddr->b;
				INCMOD(*tmp_field);

				/* Evaluate B-operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				tmp_field = &(bAddr->a);
				ADDADDR(bAddr, bAddr->a);
				rb_a = bAddr->a;
				rb_b = bAddr->b;
				INCMOD(*tmp_field);
				break;
			default:
				/* Set values to prevent compiler warnings
				 * about uninitialized variables. */
				ra_a = ra_b = rb_a = rb_b = 0;
				aAddr = bAddr = NULL;

				/* This shouldn't happen. */
				printf ("Found invalid modes.");
			}
	
			/* Switch on opcode/modifier. Cases are roughly
			 * sorted according to the frequency of the opcodes. */
			switch (GET_OP_MOD(ip->insn)) {
			/*
			 * MOV
			 */
			case OP_MOD(MOV, MODIFIER_A):
				bAddr->a = ra_a;

				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MOV, MODIFIER_F):
				bAddr->a = ra_a;
			case OP_MOD(MOV, MODIFIER_B):
				bAddr->b = ra_b;
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MOV, MODIFIER_AB):
				bAddr->b = ra_a;
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MOV, MODIFIER_X):
				bAddr->b = ra_a;
			case OP_MOD(MOV, MODIFIER_BA):
				bAddr->a = ra_b;
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MOV, MODIFIER_I):
				bAddr->insn = aAddr->insn;
				bAddr->a = ra_a;
				bAddr->b = ra_b;

				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * DAT
			 */
			case OP_MOD(DAT, MODIFIER_A):
			case OP_MOD(DAT, MODIFIER_B):
			case OP_MOD(DAT, MODIFIER_F):
			case OP_MOD(DAT, MODIFIER_I):
			case OP_MOD(DAT, MODIFIER_X):
			case OP_MOD(DAT, MODIFIER_AB):
			case OP_MOD(DAT, MODIFIER_BA):
				/* Current process dies. Finish this round,
				 * if warrior is dead. */
				if (--pqinfo->numprocesses == 0) {
					/* Update instruction counter. */
					insn_counter -= cycle - 1;

					cycle = 1;
				}
				break;
			/*
			 * SPL
			 */
			case OP_MOD(SPL, MODIFIER_A):
			case OP_MOD(SPL, MODIFIER_B):
			case OP_MOD(SPL, MODIFIER_F):
			case OP_MOD(SPL, MODIFIER_I):
			case OP_MOD(SPL, MODIFIER_X):
			case OP_MOD(SPL, MODIFIER_AB):
			case OP_MOD(SPL, MODIFIER_BA):
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);

				/* Queue new process, if possible. */
				if (pqinfo->numprocesses < maxprocesses) {
					pqinfo->numprocesses++;
					PQ_APPEND(aAddr);
				}
				break;
			/*
			 * DJN
			 */
			case OP_MOD(DJN, MODIFIER_BA):
			case OP_MOD(DJN, MODIFIER_A):
				DECMOD(bAddr->a);
				if (rb_a == 1) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				break;
			case OP_MOD(DJN, MODIFIER_AB):
			case OP_MOD(DJN, MODIFIER_B):
				DECMOD(bAddr->b);
				if (rb_b == 1) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				break;
			case OP_MOD(DJN, MODIFIER_X):
			case OP_MOD(DJN, MODIFIER_I):
			case OP_MOD(DJN, MODIFIER_F):
				DECMOD(bAddr->a);
				DECMOD(bAddr->b);
				if (rb_a == 1 && rb_b == 1) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				break;
			/*
			 * SUB
			 */
			case OP_MOD(SUB, MODIFIER_I):
			case OP_MOD(SUB, MODIFIER_F):
				SUBMOD(bAddr->b, rb_b, ra_b);
			case OP_MOD(SUB, MODIFIER_A):
				SUBMOD(bAddr->a, rb_a, ra_a);
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SUB, MODIFIER_B):
				SUBMOD(bAddr->b, rb_b, ra_b);
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SUB, MODIFIER_X):
				SUBMOD(bAddr->a, rb_a, ra_b);
			case OP_MOD(SUB, MODIFIER_AB):
				SUBMOD(bAddr->b, rb_b, ra_a);
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SUB, MODIFIER_BA):
				SUBMOD(bAddr->a, rb_a, ra_b);

				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * JMZ
			 */
			case OP_MOD(JMZ, MODIFIER_BA):
			case OP_MOD(JMZ, MODIFIER_A):
				if (rb_a == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(JMZ, MODIFIER_AB):
			case OP_MOD(JMZ, MODIFIER_B):
				if (rb_b == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(JMZ, MODIFIER_X):
			case OP_MOD(JMZ, MODIFIER_F):
			case OP_MOD(JMZ, MODIFIER_I):
				if ((rb_a == 0) && (rb_b == 0)) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			/*
			 * ADD
			 */
			case OP_MOD(ADD, MODIFIER_I):
			case OP_MOD(ADD, MODIFIER_F):
				ADDMOD(bAddr->b, ra_b, rb_b);
			case OP_MOD(ADD, MODIFIER_A):
				ADDMOD(bAddr->a, ra_a, rb_a);
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(ADD, MODIFIER_B):
				ADDMOD(bAddr->b, ra_b, rb_b);
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(ADD, MODIFIER_X):
				ADDMOD(bAddr->a, ra_b, rb_a);
			case OP_MOD(ADD, MODIFIER_AB):
				ADDMOD(bAddr->b, ra_a, rb_b);
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(ADD, MODIFIER_BA):
				ADDMOD(bAddr->a, ra_b, rb_a);

				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * JMN
			 */
			case OP_MOD(JMN, MODIFIER_BA):
			case OP_MOD(JMN, MODIFIER_A):
				if (rb_a != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(JMN, MODIFIER_AB):
			case OP_MOD(JMN, MODIFIER_B):
				if (rb_b != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(JMN, MODIFIER_X):
			case OP_MOD(JMN, MODIFIER_F):
			case OP_MOD(JMN, MODIFIER_I):
				if ((rb_a != 0) || (rb_b != 0)) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			/*
			 * SNE
			 */
			case OP_MOD(SNE, MODIFIER_A):
				if (ra_a != rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SNE, MODIFIER_B):
				if (ra_b != rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SNE, MODIFIER_AB):
				if (ra_a != rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SNE, MODIFIER_BA):
				if (ra_b != rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SNE, MODIFIER_I):
				if (aAddr->insn != bAddr->insn ||
				    ra_a != rb_a || ra_b != rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SNE, MODIFIER_F):
				if (ra_a != rb_a || ra_b != rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SNE, MODIFIER_X):
				if (ra_a != rb_b || ra_b != rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * JMP
			 */
			case OP_MOD(JMP, MODIFIER_A):
			case OP_MOD(JMP, MODIFIER_B):
			case OP_MOD(JMP, MODIFIER_F):
			case OP_MOD(JMP, MODIFIER_I):
			case OP_MOD(JMP, MODIFIER_X):
			case OP_MOD(JMP, MODIFIER_AB):
			case OP_MOD(JMP, MODIFIER_BA):
				/* Queue jump destination. */
				PQ_APPEND(aAddr);
				break;
			/*
			 * SEQ
			 */
			case OP_MOD(SEQ, MODIFIER_A):
				if (ra_a == rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SEQ, MODIFIER_B):
				if (ra_b == rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SEQ, MODIFIER_AB):
				if (ra_a == rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SEQ, MODIFIER_BA):
				if (ra_b == rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SEQ, MODIFIER_I):
				if (ra_a == rb_a && ra_b == rb_b &&
				    aAddr->insn == bAddr->insn) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SEQ, MODIFIER_F):
				if (ra_a == rb_a && ra_b == rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SEQ, MODIFIER_X):
				if (ra_a == rb_b && ra_b == rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * SLT
			 */
			case OP_MOD(SLT, MODIFIER_A):
				if (ra_a < rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SLT, MODIFIER_B):
				if (ra_b < rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SLT, MODIFIER_AB):
				if (ra_a < rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SLT, MODIFIER_BA):
				if (ra_b < rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SLT, MODIFIER_I):
			case OP_MOD(SLT, MODIFIER_F):
				if (ra_a < rb_a && ra_b < rb_b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(SLT, MODIFIER_X):
				if (ra_a < rb_b && ra_b < rb_a) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;				
			/*
			 * MUL
			 */
			case OP_MOD(MUL, MODIFIER_I):
			case OP_MOD(MUL, MODIFIER_F):
				bAddr->b = (rb_b * ra_b) % coresize;
			case OP_MOD(MUL, MODIFIER_A):
				bAddr->a = (rb_a * ra_a) % coresize;
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MUL, MODIFIER_B):
				bAddr->b = (rb_b * ra_b) % coresize;
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MUL, MODIFIER_X):
				bAddr->a = (rb_a * ra_b) % coresize;
			case OP_MOD(MUL, MODIFIER_AB):
				bAddr->b = (rb_b * ra_a) % coresize;
				
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			case OP_MOD(MUL, MODIFIER_BA):
				bAddr->a = (rb_a * ra_b) % coresize;

				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * DIV
			 */
			case OP_MOD(DIV, MODIFIER_I):
			case OP_MOD(DIV, MODIFIER_F):
				if (ra_a) bAddr->a = rb_a / ra_a;
				if (ra_b) bAddr->b = rb_b / ra_b;
				if (!ra_a || !ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(DIV, MODIFIER_X):
				if (ra_b) bAddr->a = rb_a / ra_b;
				if (ra_a) bAddr->b = rb_b / ra_a;
				if (!ra_a || !ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(DIV, MODIFIER_A):
				if (!ra_a) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->a = rb_a / ra_a;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(DIV, MODIFIER_B):
				if (!ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->b = rb_b / ra_b;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(DIV, MODIFIER_AB):
				if (!ra_a) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->b = rb_b / ra_a;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(DIV, MODIFIER_BA):
				if (!ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->a = rb_a / ra_b;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;

			/*
			 * NOP
			 */
			case OP_MOD(NOP, MODIFIER_A):
			case OP_MOD(NOP, MODIFIER_B):
			case OP_MOD(NOP, MODIFIER_F):
			case OP_MOD(NOP, MODIFIER_I):
			case OP_MOD(NOP, MODIFIER_X):
			case OP_MOD(NOP, MODIFIER_AB):
			case OP_MOD(NOP, MODIFIER_BA):
				/* Nothing to do. */
				/* Queue next instruction. */
				IPINCMOD(ip);
				PQ_APPEND(ip);
				break;
			/*
			 * MOD
			 */
			case OP_MOD(MOD, MODIFIER_I):
			case OP_MOD(MOD, MODIFIER_F):
				if (ra_a) bAddr->a = rb_a % ra_a;
				if (ra_b) bAddr->b = rb_b % ra_b;
				if (!ra_a || !ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(MOD, MODIFIER_X):
				if (ra_b) bAddr->a = rb_a % ra_b;
				if (ra_a) bAddr->b = rb_b % ra_a;
				if (!ra_a || !ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(MOD, MODIFIER_A):
				if (!ra_a) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->a = rb_a % ra_a;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(MOD, MODIFIER_B):
				if (!ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->b = rb_b % ra_b;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(MOD, MODIFIER_AB):
				if (!ra_a) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->b = rb_b % ra_a;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;
			case OP_MOD(MOD, MODIFIER_BA):
				if (!ra_b) {
					/* Current process dies. Finish this
					 * round, if warrior is dead. */
					if (--pqinfo->numprocesses == 0) {
						/* Update instruction counter.
						 */
						insn_counter -= cycle - 1;

						cycle = 1;
					}
				} else {
					bAddr->a = rb_a % ra_b;
					
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				}
				break;			
			default:
				/* This shouldn't happen. */
				printf("Invalid instruction found. "\
				       "You have a problem!\n");
			}

			/* Switch to next warriors. */
			pqinfo = pqinfo->next;
