	u32_t round; 		/* Number of the current round. */
	u64_t *results; 	/* List with the results, format: w l t. */
	u64_t insn_counter = 0; /* Counter of executed instructions. */
	u32_t pos2; 		/* Position of second warrior in the core. */
	u32_t cycle; 		/* Number of current cycle. */
	insn_t **pqueue; 	/* Memory for the process queues. */
	insn_t **pqueue_end;	/* Pointer to end of processes queue. */

	/* Available space in the core for second warrior. */
	u32_t const space = coresize - 2 * mindistance + 1; 

	/* Pointer to end of core. */
	insn_t *core_end = core + coresize;

	/* Allocate memory for the process queues. */
	pqueue = calloc(2 * maxprocesses + 2, sizeof(insn_t *));

	/* Allocate and initialized memory for results. */
	results = calloc(5, sizeof(u64_t));

	/* Check allocated memory. */
	if ((pqueue == NULL) | (results == NULL)) {
		free (results);
		free (pqueue);
		return NULL;
	}

	/* Initialize end of processes queue. */
	pqueue_end = pqueue + 2 * maxprocesses + 2;

	/* Adjust seed to make the second warrior be at position seed in
	 * the first round. */
	seed -= mindistance;

	/* Run the given number of rounds. */
	for (round = 0; round < numrounds; round++) {
		insn_t **head1;
		insn_t **head2;

		insn_t **tail1;
		insn_t **tail2;

		u32_t numprocesses1;
		u32_t numprocesses2;

		/* Calculate position of second warrior. */
		pos2 = mindistance + seed % space;
		seed = rng(seed);
		
		/* Set up core. */
		memset(core, 0, coresize * sizeof(insn_t));

		/* Load warriors. */
		memcpy(core, warriors[0].insns,
		       warriors[0].length * sizeof(insn_t));
		memcpy(core + pos2, warriors[1].insns,
		       warriors[1].length * sizeof(insn_t));

		/* Set execution order and initialize processes queues. */
		if (round % 2 == 0) {
			pqueue[0] = core + warriors[0].start;
			head1 = pqueue;
			tail1 = pqueue + 1;

			pqueue[maxprocesses + 1] = core + pos2 +
						   warriors[1].start;
			head2 = pqueue + maxprocesses + 1;
			tail2 = pqueue + maxprocesses + 2;
		} else {
			pqueue[0] = core + warriors[0].start;
			head2 = pqueue;
			tail2 = pqueue + 1;

			pqueue[maxprocesses + 1] = core +  pos2 +
						   warriors[1].start;
			head1 = pqueue + maxprocesses + 1;
			tail1 = pqueue + maxprocesses + 2;
		}
		numprocesses1 = numprocesses2 = 1;
