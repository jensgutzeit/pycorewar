
			/* Switch on opcode/amode/bmode. */
			switch (ip->insn) {
			/*
	 		 * MOV
	 		 */
			case INSN88(MOV, DIRECT, DIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				/* Copy complete instruction. */
				*bAddr = *aAddr;
		
				goto queue;
			case INSN88(MOV, DIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				/* Copy complete instruction. */
				*bAddr = *aAddr;
		
				goto queue;
			case INSN88(MOV, DIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				/* Copy complete instruction. */
				bAddr->insn = aAddr->insn;
				bAddr->a = aAddr->a;
				bAddr->b = ra_b;
		
				goto queue;
			case INSN88(MOV, PREDECREMENT, DIRECT):
				rb_b = ip->b; /* Save value, because it might
					       * be changed by A operand. */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);	

				/* Copy complete instruction. */
				*bAddr = *aAddr;
		
				goto queue;
			case INSN88(MOV, PREDECREMENT, INDIRECT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);	
				
				/* Copy complete instruction. */
				*bAddr = *aAddr;
		
				goto queue;
			case INSN88(MOV, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b;
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);	

				/* Copy complete instruction. */
				bAddr->insn = aAddr->insn;
				bAddr->a = aAddr->a;
				bAddr->b = ra_b;
		
				goto queue;
			case INSN88(MOV, INDIRECT, DIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				/* Copy complete instruction. */
				*bAddr = *aAddr;
		
				goto queue;
			case INSN88(MOV, INDIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				
				/* Copy complete instruction. */
				*bAddr = *aAddr;
		
				goto queue;
			case INSN88(MOV, INDIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b;
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				/* Copy complete instruction. */
				bAddr->insn = aAddr->insn;
				bAddr->a = aAddr->a;
				bAddr->b = ra_b;
		
				goto queue;
			case INSN88(MOV, IMMEDIATE, DIRECT):
				/* Evalute A operand. */
				/* Nothing to do. */

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				/* Copy A field to B field. */
				bAddr->b = ip->a;
		
				goto queue;
			case INSN88(MOV, IMMEDIATE, INDIRECT):
				/* Evalute A operand. */
				/* Nothing to do. */

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
						
				/* Copy A field to B field. */
				bAddr->b = ip->a;
		
				goto queue;
			case INSN88(MOV, IMMEDIATE, PREDECREMENT):
				/* Evalute A operand. */
				/* Nothing to do. */

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);
						
				/* Copy A field to B field. */
				bAddr->b = ip->a;
		
				goto queue;
			/*
	 		 * SPL
	 		 */
			case INSN88(SPL, DIRECT, PREDECREMENT):
				/* Partially evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);	
			case INSN88(SPL, DIRECT, IMMEDIATE):
			case INSN88(SPL, DIRECT, DIRECT):
			case INSN88(SPL, DIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
		
				/* No need to evaluate B operand. */

				/* Queue next instruction */
				IPINCMOD(ip);
				PQ_APPEND(ip);

				/* Queue new process, if possible. */
				if (pqinfo->numprocesses < maxprocesses) {
					pqinfo->numprocesses++;
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(SPL, INDIRECT, IMMEDIATE):
			case INSN88(SPL, INDIRECT, DIRECT):
			case INSN88(SPL, INDIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* No need to evaluate B operand. */

				/* Queue next instruction */
				IPINCMOD(ip);
				PQ_APPEND(ip);

				/* Queue new process, if possible. */
				if (pqinfo->numprocesses < maxprocesses) {
					pqinfo->numprocesses++;
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(SPL, INDIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Partially evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);

				/* Queue next instruction */
				IPINCMOD(ip);
				PQ_APPEND(ip);

				/* Queue new process, if possible. */
				if (pqinfo->numprocesses < maxprocesses) {
					pqinfo->numprocesses++;
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(SPL, PREDECREMENT, IMMEDIATE):
			case INSN88(SPL, PREDECREMENT, DIRECT):
			case INSN88(SPL, PREDECREMENT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* No need to evaluate B operand. */

				/* Queue next instruction */
				IPINCMOD(ip);
				PQ_APPEND(ip);

				/* Queue new process, if possible. */
				if (pqinfo->numprocesses < maxprocesses) {
					pqinfo->numprocesses++;
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(SPL, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Partially evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
		
				/* Queue next instruction */
				IPINCMOD(ip);
				PQ_APPEND(ip);

				/* Queue new process, if possible. */
				if (pqinfo->numprocesses < maxprocesses) {
					pqinfo->numprocesses++;
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			/*
			 * DAT
			 */
			case INSN88(DAT, IMMEDIATE, PREDECREMENT):
				/* Partially evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
			case INSN88(DAT, IMMEDIATE, IMMEDIATE):
			case INSN88(DAT, DIRECT, DIRECT):
				/* DAT $ x, $ y isn't a valid instruction,
				 * but can be executed nonetheless! */

				/* Current process dies. Finish this						 * round, if warrior is dead. */
				if (--pqinfo->numprocesses == 0) {
					/* Update instruction counter. */
					insn_counter -= cycle - 1;

					cycle = 1;
				}
				goto no_queue;
			case INSN88(DAT, PREDECREMENT, IMMEDIATE):
				/* Partially evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);

				/* Current process dies. Finish this round,
				 * if warrior is dead. */
				if (--pqinfo->numprocesses == 0) {
					/* Update instruction counter. */
					insn_counter -= cycle - 1;

					cycle = 1;
				}
				goto no_queue;
			case INSN88(DAT, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Partially evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);

				/* Partially evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);

				/* Current process dies. Finish this round,
				 * if warrior is dead. */
				if (--pqinfo->numprocesses == 0) {
					/* Update instruction counter. */
					insn_counter -= cycle - 1;

					cycle = 1;
				}
				goto no_queue;
			/*
			 * JMP
			 */
			case INSN88(JMP, DIRECT, PREDECREMENT):
				/* Partially evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
			case INSN88(JMP, DIRECT, IMMEDIATE):
			case INSN88(JMP, DIRECT, DIRECT):
			case INSN88(JMP, DIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* No need to evaluate B operand. */
	
				/* Queue jump destination. */
				PQ_APPEND(aAddr);
				goto no_queue;
			case INSN88(JMP, INDIRECT, IMMEDIATE):
			case INSN88(JMP, INDIRECT, DIRECT):
			case INSN88(JMP, INDIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* No need to evaluate B operand. */

				/* Queue jump destination. */
				PQ_APPEND(aAddr);
				goto no_queue;
			case INSN88(JMP, INDIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Partially evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);

				/* Queue jump destination. */
				PQ_APPEND(aAddr);
				goto no_queue;
			case INSN88(JMP, PREDECREMENT, IMMEDIATE):
			case INSN88(JMP, PREDECREMENT, DIRECT):
			case INSN88(JMP, PREDECREMENT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* No need to evaluate B operand. */

				/* Queue jump destination. */
				PQ_APPEND(aAddr);
				goto no_queue;
			case INSN88(JMP, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Partially evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);

				/* Queue jump destination. */
				PQ_APPEND(aAddr);
				goto no_queue;
			/*
			 * DJN
			 */
			case INSN88(DJN, DIRECT, IMMEDIATE):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				/* Nothing to do. */

				DECMOD(ip->b);
				if (ip->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, DIRECT, DIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto  no_queue;
			case INSN88(DJN, DIRECT, INDIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, DIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, INDIRECT, IMMEDIATE):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				/* Nothing to do. */

				DECMOD(ip->b);
				if (ip->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, INDIRECT, DIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, INDIRECT, INDIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, INDIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, PREDECREMENT, IMMEDIATE):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				/* Nothing to do. */

				DECMOD(ip->b);
				if (ip->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, PREDECREMENT, DIRECT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, PREDECREMENT, INDIRECT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			case INSN88(DJN, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				DECMOD(bAddr->b);
				if (bAddr->b == 0) {
					/* Queue next instruction. */
					IPINCMOD(ip);
					PQ_APPEND(ip);
				} else {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
				}
				goto no_queue;
			/*
			 * ADD
			 */
			case INSN88(ADD, IMMEDIATE, DIRECT):
				/* Evaluate A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				ADDMOD(bAddr->b, bAddr->b, ip->a);

				goto queue;
			case INSN88(ADD, IMMEDIATE, INDIRECT):
				/* Evaluate A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->b, bAddr->b, ip->a);

				goto queue;
			case INSN88(ADD, IMMEDIATE, PREDECREMENT):
				/* Evaluate A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->b, bAddr->b, ip->a);

				goto queue;
			case INSN88(ADD, DIRECT, DIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(ADD, DIRECT, INDIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(ADD, DIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, ra_b);

				goto queue;
			case INSN88(ADD, INDIRECT, DIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(ADD, INDIRECT, INDIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(ADD, INDIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, ra_b);

				goto queue;
			case INSN88(ADD, PREDECREMENT, DIRECT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(ADD, PREDECREMENT, INDIRECT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(ADD, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				ADDMOD(bAddr->a, bAddr->a, aAddr->a);
				ADDMOD(bAddr->b, bAddr->b, ra_b);

				goto queue;
			/*
			 * SUB
			 */
			case INSN88(SUB, IMMEDIATE, DIRECT):
				/* Evaluate A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				SUBMOD(bAddr->b, bAddr->b, ip->a);

				goto queue;
			case INSN88(SUB, IMMEDIATE, INDIRECT):
				/* Evaluate A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->b, bAddr->b, ip->a);

				goto queue;
			case INSN88(SUB, IMMEDIATE, PREDECREMENT):
				/* Evaluate A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->b, bAddr->b, ip->a);

				goto queue;
			case INSN88(SUB, DIRECT, DIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(SUB, DIRECT, INDIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(SUB, DIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, ra_b);

				goto queue;
			case INSN88(SUB, INDIRECT, DIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(SUB, INDIRECT, INDIRECT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(SUB, INDIRECT, PREDECREMENT):
				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, ra_b);

				goto queue;
			case INSN88(SUB, PREDECREMENT, DIRECT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(SUB, PREDECREMENT, INDIRECT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, aAddr->b);

				goto queue;
			case INSN88(SUB, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evaluate A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				SUBMOD(bAddr->a, bAddr->a, aAddr->a);
				SUBMOD(bAddr->b, bAddr->b, ra_b);

				goto queue;
			/*
			 * JMZ
			 */
			case INSN88(JMZ, DIRECT, IMMEDIATE):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				if (ip->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, DIRECT, DIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (bAddr->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, DIRECT, INDIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, DIRECT, PREDECREMENT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, INDIRECT, IMMEDIATE):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				/* Nothing to do. */

				if (ip->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);
					ADDADDR(aAddr, aAddr->b);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, INDIRECT, DIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (bAddr->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);
					ADDADDR(aAddr, aAddr->b);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, INDIRECT, INDIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b == 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);
					ADDADDR(aAddr, aAddr->b);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, INDIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, PREDECREMENT, IMMEDIATE):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				if (ip->b == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, PREDECREMENT, DIRECT):
				rb_b = ip->b; /* == rb_b !!! */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				if (bAddr->b == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMZ, PREDECREMENT, INDIRECT):
				rb_b = ip->b; /* == rb_b !!! */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto no_queue;
			case INSN88(JMZ, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b; /* == rb_b !!! */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b == 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			/*
			 * JMN
			 */
			case INSN88(JMN, DIRECT, IMMEDIATE):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				/* Nothing to do. */

				if (ip->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, DIRECT, DIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (bAddr->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, DIRECT, INDIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, DIRECT, PREDECREMENT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, INDIRECT, IMMEDIATE):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				/* Nothing to do. */

				if (ip->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);
					ADDADDR(aAddr, aAddr->b);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, INDIRECT, DIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (bAddr->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);
					ADDADDR(aAddr, aAddr->b);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, INDIRECT, INDIRECT):
				/* Evaluate B operand first, because in this
				 * case no harm can be done. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b != 0) {
					/* Evalute A operand. */
					ASSIGNADDR(aAddr, ip, ip->a);
					ADDADDR(aAddr, aAddr->b);

					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, INDIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, PREDECREMENT, IMMEDIATE):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				if (ip->b != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, PREDECREMENT, DIRECT):
				rb_b = ip->b; /* == rb_b !!! */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				if (bAddr->b != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, PREDECREMENT, INDIRECT):
				rb_b = ip->b; /* == rb_b !!! */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			case INSN88(JMN, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b; /* == rb_b !!! */

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (bAddr->b != 0) {
					/* Queue jump destination. */
					PQ_APPEND(aAddr);
					goto no_queue;
				}
				goto queue;
			/*
			 * CMP
			 */
			case INSN88(CMP, IMMEDIATE, DIRECT):
				/* Evalute A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (ip->a == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, IMMEDIATE, INDIRECT):
				/* Evalute A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (ip->a == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, IMMEDIATE, PREDECREMENT):
				/* Evalute A operand. */
				/* Nothing to do. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (ip->a == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, DIRECT, DIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    aAddr->b    == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, DIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    aAddr->b    == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, DIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    ra_b        == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, INDIRECT, DIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    aAddr->b    == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, INDIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    aAddr->b    == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, INDIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    ra_b        == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, PREDECREMENT, DIRECT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    aAddr->b    == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, PREDECREMENT, INDIRECT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
		
				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->insn == bAddr->insn &&
		   		    aAddr->a    == bAddr->a &&
				    aAddr->b    == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(CMP, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */


				/* Evaluate B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->insn == bAddr->insn &&
				    aAddr->a    == bAddr->a &&
				    ra_b        == bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			/*
			 * SLT
			 */
			case INSN88(SLT, IMMEDIATE, DIRECT):
				/* Evalute A operand. */
				/* Nothing to do. */
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (ip->a < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, IMMEDIATE, INDIRECT):
				/* Evalute A operand. */
				/* Nothing to do. */
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (ip->a < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, IMMEDIATE, PREDECREMENT):
				/* Evalute A operand. */
				/* Nothing to do. */
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (ip->a < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, DIRECT, DIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (aAddr->b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, DIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);
				
				if (aAddr->b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, DIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (ra_b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, INDIRECT, DIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);

				if (aAddr->b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, INDIRECT, INDIRECT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, INDIRECT, PREDECREMENT):
				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, ip->b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (ra_b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, PREDECREMENT, DIRECT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);

				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);

				if (aAddr->b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, PREDECREMENT, INDIRECT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				ADDADDR(bAddr, bAddr->b);

				if (aAddr->b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			case INSN88(SLT, PREDECREMENT, PREDECREMENT):
				rb_b = ip->b;

				/* Evalute A operand. */
				ASSIGNADDR(aAddr, ip, ip->a);
				DECMOD(aAddr->b);
				ADDADDR(aAddr, aAddr->b);
				ra_b = aAddr->b; /* Save value, because it
						  * might be changed by
						  * B operand. */
		
				/* Evalute B operand. */
				ASSIGNADDR(bAddr, ip, rb_b);
				DECMOD(bAddr->b);
				ADDADDR(bAddr, bAddr->b);

				if (ra_b < bAddr->b) {
					/* Skip next instruction. */
					IPINCMOD(ip);
				}
				goto queue;
			default:
				/* Found invalid instruction. */
				results[4] = MARS_88_INVALID_INSN;
				cycle = 1;
			}

queue:			/* Append next instruction. */
			IPINCMOD(ip);
			PQ_APPEND(ip);

no_queue:		/* Switch to next warrior. */
			pqinfo = pqinfo->next;
